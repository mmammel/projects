# ~/.bash_profile: executed by bash for login shells.

alias a='man -k'
alias logout='dir_persist ; logout'
alias be='$EDITOR ~/.bashrc ; source ~/.bashrc'
alias f=finger
alias h=history
alias j=jobs
alias ls='ls -F'
alias ll='ls -l'
alias la='ls -al'
alias cp='cp -i'
alias m='less -a -i -P='
alias xman='xman -bothshown -notopbox &'
alias mon='monitor -top'
alias du='du -k'
alias llm='ls -l | more'
alias emacs='emacs -bg White'
#alias grep='grep -n'
alias tail='tail -f'

export TMP=/tmp
export PS1="\u@\h:\w\n$ "

# I set these through windows so they would be seen by eclipse too.
export P4USER=mmammel
export P4CLIENT=p4mac
export P4PORT=butkus.homelinux.com:1666
export P4PROGRAM="/usr/bin/p4"

function grecfind {
    if [ $# -eq 1 ]; then
        findStr=${1};
        fileSpec=*;
    else
        findStr=${2};
        fileSpec=${1};
    fi

    find . -name "${fileSpec}" -print | xargs grep -n ${findStr};
} 2>/dev/null

function factor {
  ~/factor/factor.sh $1
}

function findClass {
  echo "Looking in jars..."
  for jarfile in `find . -name "*.jar" -print`; do
    FOUND=(`jar tf $jarfile | grep "$1"`);
    if [ ! -z ${FOUND[0]} ]; then
      echo "Found in $jarfile:";
      for found in ${FOUND[@]}; do
        echo "$found";
      done
    fi
  done
  echo "...done.  Looking on filesystem..."
  find . -name "*$1*.class" -print
  echo "...done."
} 2>/dev/null

function findPackage {
  PACKAGE=`echo "$1" | tr '.' '/'`
  echo "Looking in jars..."
  for jarfile in `find . -name "*.jar" -print`; do
    FOUND=(`jar tf $jarfile | grep "$PACKAGE"`);
    if [ ! -z ${FOUND[0]} ]; then
      echo "Found in $jarfile:";
      for found in ${FOUND[@]}; do
        echo "$found";
      done
    fi
  done
  echo "...done.  Looking on filesystem...";
  find . -name "*.class" -print | grep "$PACKAGE"
  echo "...done."
} 2>/dev/null

function mfind {
  currentDir=`pwd`;
  if [ $# -eq 1 ]; then
    find ${currentDir} -name "${1}" -print;
  else
    echo "Error: Usage: mfind <searchPattern>"
  fi

} 2>/dev/null

function recfind {
    find . -name "*.[ch]*" -print | xargs grep -n "$1";
} 2>/dev/null

function jrecfind {
    find . -name "*.java" -print | xargs egrep -n "$1";
} 2>/dev/null

function xrecfind {
    find . -name "*.xml" -print | xargs egrep -n "$1";
} 2>/dev/null

function findgrep {
    if [ -d $1 ] ; then
        dir=$1
        shift
    else
        dir=.
    fi
    if [ -z $1 ] ; then
        echo >&2 "Usage: findgrep [dir] [grep-flags] pattern extension"
    else
      if [ $# -eq 3 ] ; then
        grep -n $1 $2 $(find $dir -name $3) | cut -c1-78
      else
        grep -n $1 $(find $dir -name $2) | cut -c1-78
      fi
    fi
} 2>/dev/null

CD_USAGE="cd: Usage: cd [ -s [ 1-5 | [1-5]=<directory> ] | -p | <directory name> | [1-5] ]";

function dir_persist {
    _DIRSTRINGS=(ONE_DC TWO_DC THREE_DC FOUR_DC FIVE_DC)

    if [ $# -eq 0 ]; then
      echo -n "Enter a name to persist dirs under, or <enter> to skip: "
      read session_tag
    else
      session_tag=${1}
    fi

    if [ "${session_tag}" = "" ]; then
        CDFILE_NAME=".cdfile_${HOSTNAME}_default"
    else
        CDFILE_NAME=".cdfile_${HOSTNAME}_${session_tag}"
    fi

    let count=0;
    while [ $count -lt 5 ] ; do
      outp=`env | grep "${_DIRSTRINGS[$count]}"`;
      if [ "" != "$outp" ] ; then
        dir_to_print=`echo $outp | cut -d"=" -f2`;
        let num=count+1;
        if [ $count -eq 0 ] ; then
            echo "$num=$dir_to_print" > ~/${CDFILE_NAME};
        else
            echo "$num=$dir_to_print" >> ~/${CDFILE_NAME};
        fi
      fi
      let count=count+1;
    done
}

function dirset {
  _DIRSTRINGS=(ONE_DC TWO_DC THREE_DC FOUR_DC FIVE_DC)

 let err=0;

 if [ "$#" -ge 2 ] || [ "$#" -eq 0 ] ; then
   let err=1;
 fi
 if [ -z `echo "$1" | grep "="` ] ; then
    let reg=$1;
    let pwd_flag=1;
 else
    let reg=`echo "$1" | cut -d"=" -f1`;
    dir=`echo "$1" | cut -d"=" -f2 | tr '~' ' '`;
    let pwd_flag=0;
 fi

 if [ $reg -gt 5 ] || [ $reg -lt 1 ] ; then
   echo >&2 "cd: Invalid directory choice";
   let err=1;
 fi
 if [ $err -eq 0 ] ; then
    if [ $pwd_flag -eq 1 ] ; then
        littlePWD="${PWD}"
        export "${_DIRSTRINGS[$reg]}=${littlePWD}";
    else
        littleDir="${dir}"
        export "${_DIRSTRINGS[$reg]}=${littleDir}";
    fi
 fi
}

function cd {
  _DIRSTRINGS=(ONE_DC TWO_DC THREE_DC FOUR_DC FIVE_DC)
  let err=0

case $# in
0)
     chdir
     return
;;
1)
    if [ "$1" = "-p" ] ; then
      let count=1
       while [ "$count" -lt 6 ] ; do
         outp=`env | grep "${_DIRSTRINGS[$count]}"`
         if [ "" != "$outp" ] ; then
           dir_to_print=`echo $outp | cut -d"=" -f2`
           let num=count
           echo "$num) $dir_to_print"
         fi
         let count=count+1
       done
     elif [ "$1" = 1 -o "$1" = 2 -o "$1" = 3 -o "$1" = 4 -o "$1" = 5 ] ; then
      let choice=$1
      _CD_STRING="\$${_DIRSTRINGS[$choice]}"
      CD_STRING=`eval echo "${_CD_STRING}"`
      chdir "${CD_STRING}"
     else
      chdir "${1}"
      return
     fi
;;
2)
    teststr=`echo $1 | grep "\-s"`
   if [ -z "$teststr" ] ; then
      echo >&2 "$CD_USAGE"
      let err=1
      return
   fi
      dirset "$2"
;;
*)
     echo >&2 "$CD_USAGE"
     let err=1
     return
;;
esac

}

#Persist directories
#echo "Choose a tag to persist, or <enter> to skip:"
cdFileNames=(`find ~ -maxdepth 1 -name ".cdfile_*" -print0`)
let loopCount=0
for fileName in ${cdFileNames[@]}; do
    let loopCount=${loopCount}+1
    trimmedName=`echo ${fileName} | cut -d'_' -f2-`
    echo "(${loopCount}) ${trimmedName}"
done
echo ""
echo -n "Please enter which dir set to use [<enter> to exit]: "
read setSelection
if [ "$setSelection" = "" ]; then
  touch .cdfile_empty
  CDFILE_NAME=".cdfile_empty"
else
  if [ "${setSelection}" -gt "${loopCount}" ]; then
    echo "Invalid selection"
    touch .cdfile_empty
    CDFILE_NAME=".cdfile_empty"
  else
    let setSelection=${setSelection}-1;
    CDFILE_NAME=${cdFileNames[${setSelection}]}
    echo ""
    echo -n "Persisting Directories"
  fi
fi

dirArgs=(`cat ~/${CDFILE_NAME} | command grep = | tr " " '~'`)
for dirarg in "${dirArgs[@]}"; do
  dirset "${dirarg}";
  echo -n "."
done
echo "Done"
echo ""
echo ""

function editvi {
    p4 edit $*
    vi $*
}


function editemacs {
    p4 edit $*
    emacs $* &
}

export GRAILS_HOME=/users/mmammel/grails/grails-1.3.7
export ANT_HOME=/Users/mmammel/ant/apache-ant-1.10.1
export MAVEN_HOME=/Users/mmammel/maven/apache-maven-3.5.3
export PATH=$PATH:$GRAILS_HOME/bin:$ANT_HOME/bin:$MAVEN_HOME/bin
export PATH=$JAVA_HOME/bin:$PATH

